services:
  php:
    # This uses PHP 8.1.x with Apache: update to match your version of PHP
    image: tugboatqa/php:8.1-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends:
      - mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        - echo "===== Apache/PHP Init ======"

        # Add the shell to the beginning of the .bashrc.
        - sed -i '1s/^/export SHELL=\/bin\/bash\n\n/' ~/.bashrc

        # Add commands in vendor/bin to the PATH in .bashrc.
        - echo "export PATH=$PATH:/var/lib/tugboat/vendor/bin" >> ~/.bashrc

        - |
          # Enable colored terminal and some aliases.
          sed -e '11,15 s/#//' -i ~/.bashrc
          sed -e '18,20 s/#//' -i ~/.bashrc

        - bash -c 'source ~/.bashrc'

        # Add some useful commands.
        - apt-get update && apt-get -y install tree nano python3 python3-pip

        # Show mysql defaults.
        - mysql --help | grep "Default options" -A 1

        # Show the directory structure.
        - tree -d -L 3

        # Install opcache and enable mod-rewrite.
        - docker-php-ext-install opcache
        - a2enmod headers rewrite

        # Link the document root to the expected path. This example links
        # /docroot to the docroot of the Apache server (/var/www/html).
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # Increase php memory limit to 256M.
        - echo "memory_limit = 256M" >> /usr/local/etc/php/conf.d/my-php.ini

        # Enable display errors.
        - echo "display_errors = On" >> /usr/local/etc/php/conf.d/my-php.ini

        # Use the tugboat-specific Drupal settings.
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.tugboat.php" "${DOCROOT}/sites/default/settings.local.php"

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        - echo "===== Apache/PHP Update ====="

        # Copy the files directory from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
        #- rsync -av --delete user@example.com:/path/to/files/ "${DOCROOT}/sites/default/files/"

        # Install/update packages managed by composer, including drush.
        # First ensure there are no artifacts that snuck into the repo.
        - rm -rf vendor/ web/modules/contrib/ web/core/
        - composer update --optimize-autoloader

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        #- drush -r "${DOCROOT}" pm-download stage_file_proxy
        #- drush -r "${DOCROOT}" pm-enable --yes stage_file_proxy
        #- drush -r "${DOCROOT}" variable-set stage_file_proxy_origin "http://www.example.com"

        # Set file permissions such that Drupal will not complain
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - vendor/bin/drush -r "${DOCROOT}" cache-clear all
        - vendor/bin/drush -r "${DOCROOT}" updb -y

  # What to call the service hosting MySQL. This name also acts as the
  # hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mysql:5-debian

    # A set of commands to run while building this service
    commands:
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        #- scp user@example.com:database.sql.gz /tmp/database.sql.gz
        #- zcat /tmp/database.sql.gz | mysql tugboat
        #- rm /tmp/database.sql.gz
